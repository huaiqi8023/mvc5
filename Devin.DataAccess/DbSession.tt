<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="EF.Utility.CS.ttinclude"#>  //引进TT模板的命名空间
<#@ output extension=".cs" #>
<# CodeGenerationTools code = new CodeGenerationTools(this);

MetadataLoader loader = new MetadataLoader(this);

CodeRegion region = new CodeRegion(this, 1);

MetadataTools ef = new MetadataTools(this);

string inputFile = @"..\\Devin.Models\\Model1.edmx";

EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);

string namespaceName = code.VsNamespaceSuggestion();

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

#>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Devin.IDataAccess;
using Devin.Models;
using Devin.IDataAccess.IBaseDataAccess;
using System.Data;
using System.Linq.Expressions;
using Devin.DataAccess.BaseDataAccess;
namespace Devin.DataAccess
{
    //一次跟数据库交互的会话
    public partial class DbSession:IDbSession  //代表应用程序跟数据库之间的一次会话，也是数据库访问层的统一入口
    {
		//从这里需要一个for循环来遍历数据库中所有的表放置在下面即可，这样就实现了所有表的对应的仓储显示出来

	<#	foreach(EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e=>e.Name)){	 #>
		 public I<#=entity.Name#>Repository <#=entity.Name#>Repository
        {
            get { return new <#=entity.Name#>Repository(); }
        }
	<#	}	#>

		/// <summary>
        /// 代表：当前应用程序跟数据库的绘画内所有的实体的变化，更新数据库
        /// </summary>
        /// <returns></returns>
        public int SaveChanges() //目标是实现单元工作模式(UintWork)
        {
            //调用EF上下文的SaveChanges方法
            return EFContextFactory.GetCurrentDbContext().SaveChanges();
        }

        /// <summary>
        /// 执行一个sql脚本的方法
        /// </summary>
        /// <param name="strSql">sql语句</param>
        /// <param name="parameters">参数</param>
        /// <returns></returns>
        public int ExcuteSql(string strSql, System.Data.Common.DbParameter[] parameters)
        {
            return EFContextFactory.GetCurrentDbContext().Database.ExecuteSqlCommand(strSql, parameters);
        }
	}
}
